import { F, G1 } from '..'
import bigInt = require('big-integer')
import { expect } from 'chai'
import 'mocha'

describe('g1', () => {
  it('should test equality', () => {
    const x = F.fromString('10359072021056437277868202391129985043814934557668504926888358880646747642184640867384365675519941530456810760699')
    const y = F.fromString('251151224528882410907986054650614518316938451764005416344901974712043706952192693540772656318250463014237381419439')
    const p = G1.fromElements(x, y)
    const x2 = F.fromString('127108056167737228343199597711388979676819806573085305610867807772326184180936800309374112310779492130612251382160')
    const y2 = F.fromString('250420320581190511266959040209404514288511545803899805046779354961486891203618710894910516486231191832775178372422')
    const p2 = G1.fromElements(x2, y2)
    expect(p.equals(p)).to.be.true
    expect(p.equals(p2)).to.be.false
  })

  it('should add correctly', () => {
    const x = F.fromString('10359072021056437277868202391129985043814934557668504926888358880646747642184640867384365675519941530456810760699')
    const y = F.fromString('251151224528882410907986054650614518316938451764005416344901974712043706952192693540772656318250463014237381419439')
    const p = G1.fromElements(x, y)
    const x2 = F.fromString('127108056167737228343199597711388979676819806573085305610867807772326184180936800309374112310779492130612251382160')
    const y2 = F.fromString('250420320581190511266959040209404514288511545803899805046779354961486891203618710894910516486231191832775178372422')
    const p2 = G1.fromElements(x2, y2)
    const p3 = p.add(p2).toAffine()
    expect(p3.equals(
      G1.fromElements(
        F.fromString('28706072049139743913961304065607770444015133363528069490602538661140877668379767406222002661528486955292274587941'),
        F.fromString('58310688084419858328435827002003357342195043871462273392041955618922330823875044268127256681451132273944495093674'),
      ),
    )).to.be.true
  })

  it('should double correctly', () => {
    const x = F.fromString('10359072021056437277868202391129985043814934557668504926888358880646747642184640867384365675519941530456810760699')
    const y = F.fromString('251151224528882410907986054650614518316938451764005416344901974712043706952192693540772656318250463014237381419439')
    const p = G1.fromElements(x, y)
    const p3 = p.dbl().toAffine()
    expect(p3.equals(
      G1.fromElements(
        F.fromString('100406495097683584255358201597988016233591504530780704496495127329407856735949558049179479777252726970296785896216'),
        F.fromString('63807138026163771468611662767681672353158802952448833583661885801557782260041754817382759731402212350042477212809'),
      ),
    )).to.be.true
    expect(p3.equals(p.add(p))).to.be.true
  })

  it('should scalar multiply correctly', () => {
    const x = F.fromString('10359072021056437277868202391129985043814934557668504926888358880646747642184640867384365675519941530456810760699')
    const y = F.fromString('251151224528882410907986054650614518316938451764005416344901974712043706952192693540772656318250463014237381419439')
    const p = G1.fromElements(x, y)
    const p3 = p.scalarMult(bigInt(20)).toAffine()
    expect(p3.equals(
      G1.fromElements(
        F.fromString('144614760132971207385251530804005715374473391719357086627481890384922936873492842038842436295127693358238743175073'),
        F.fromString('54557600087194263778370822839330296876648397056189636326960007369558490921812192274051900665335067189053148423619'),
      ),
    )).to.be.true
  })
})
